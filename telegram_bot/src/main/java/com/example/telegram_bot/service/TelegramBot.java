package com.example.telegram_bot.service;

import com.example.telegram_bot.config.BotConfig;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;

import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    private final BotConfig config;

    public TelegramBot(BotConfig config) {
        this.config = config;

        List<BotCommand> listOfCommands = new ArrayList<>();
        listOfCommands.add(new BotCommand("/start", "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–∏–µ"));

        try {
            this.execute(new SetMyCommands(listOfCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            System.out.println("Error setting bot commands: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            var message = update.getMessage();

            long chatId = message.getChatId();

            if (message.hasText()) {
                String messageText = message.getText();
                if (messageText.equals("/start")) {
                    String name = message.getChat().getFirstName();
                    sendWelcomeMessage(chatId, name);
                }
            }
        } else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();

            switch (callbackData) {
                case "delivery":
                    sendDeliveryWithPhotosAndButtons(chatId);
                    break;

                case "europe":
                    sendEuropePhotos(chatId);
                    break;

                case "usa":
                    sendUsaPhotos(chatId);
                    break;

                default:
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
            }
        }
    }

    private void sendDeliveryWithPhotosAndButtons(long chatId) {
        String info = "–í–ê–ñ–ù–û:\n\n" +
                "‚ñ´Ô∏è –ü–æ—Ä–æ–≥ –±–µ—Å–ø–æ—à–ª–∏–Ω–Ω–æ–≥–æ –≤–≤–æ–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ - 200‚Ç¨.\n\n" +
                "‚ñ´Ô∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî 60 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –¥–∞–ª–µ–µ ‚Äî 0,20 ‚Ç¨ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å;\n\n" +
                "‚ñ´Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–∞–≥–∞–∑–∏–Ω ‚Äî 7‚Ç¨;\n\n" +
                "‚ñ´Ô∏è –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî 5 ‚Ç¨;\n\n" +
                "‚ñ´Ô∏è –ö–æ—Å–º–µ—Ç–∏–∫—É –∏ –ø–∞—Ä—Ñ—é–º —Å –ï–≤—Ä–æ–ø—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–∂–Ω–æ.\n\n" +
                "‚ñ´Ô∏è –î–æ—Å—Ç–∞–≤–∫–∞ lux-–±—Ä–µ–Ω–¥–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Å—Ä–æ–∫ 7 –¥–Ω–µ–π, –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.\n\n" +
                "‚ñ´Ô∏è –î–æ—Å—Ç–∞–≤–∫–∞ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä–æ–º, –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.\n\n" +
                "‚ñ´Ô∏è –ó–∞–º–µ—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n\n" +
                "‚ñ´Ô∏è –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ –ï–≤—Ä–æ–ø—ã –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä.\n\n" +
                "‚ñ´Ô∏è –£—Å–ª—É–≥–∞ —Å—Ä–µ–∑–∞–Ω–∏—è —Ü–µ–Ω–Ω–∏–∫–æ–≤ (–±–æ–ª—å—à–µ 2-—Ö) - 4‚Ç¨ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞–Ω –Ω–∞ —Å–∫–∏–¥–∫–µ –∏ –Ω–∞–¥–æ –ø—Ä–æ–π—Ç–∏ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç).";

        String[] photoPaths = {
                "photo_2025-01-17 15.47.06.jpeg",
                "photo_2025-01-17 15.47.09.jpeg"
        };

        try {
            InputStream photoStream1 = getClass().getClassLoader().getResourceAsStream(photoPaths[0]);
            InputFile inputFile1 = new InputFile(photoStream1, photoPaths[0]);
            SendPhoto firstPhoto = new SendPhoto();
            firstPhoto.setChatId(String.valueOf(chatId));
            firstPhoto.setPhoto(inputFile1);
            firstPhoto.setCaption(info);

            execute(firstPhoto);

            InputStream photoStream2 = getClass().getClassLoader().getResourceAsStream(photoPaths[1]);
            InputFile inputFile2 = new InputFile(photoStream2, photoPaths[1]);
            SendPhoto secondPhoto = new SendPhoto();
            secondPhoto.setChatId(String.valueOf(chatId));
            secondPhoto.setPhoto(inputFile2);

            execute(secondPhoto);

            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:");

            InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
            rowsInline.add(List.of(
                    createInlineButton("–ï–≤—Ä–æ–ø–∞", "europe", false),
                    createInlineButton("–°–®–ê", "usa", false)
            ));

            markupInline.setKeyboard(rowsInline);
            message.setReplyMarkup(markupInline);

            execute(message);
        } catch (TelegramApiException e) {
            System.out.println("Error sending delivery photos and buttons: " + e.getMessage());
            e.printStackTrace();
        }
    }
    private void sendEuropePhotos(long chatId) {
        String[] europePhotoPaths = {
                "photo_2025-01-17 15.47.11.jpeg",
                "photo_2025-01-17 15.47.13.jpeg"
        };

        sendPhotos(chatId, europePhotoPaths, "\uD83C\uDDEA\uD83C\uDDFA");
    }

    private void sendUsaPhotos(long chatId) {
        String[] usaPhotoPaths = {
                "photo_2025-01-17 15.47.16.jpeg",
                "photo_2025-01-17 15.47.18.jpeg"
        };

        sendPhotos(chatId, usaPhotoPaths, "\uD83C\uDDFA\uD83C\uDDF8");
    }

    private void sendPhotos(long chatId, String[] photoPaths, String introText) {
        try {
            SendMessage introMessage = new SendMessage();
            introMessage.setChatId(String.valueOf(chatId));
            introMessage.setText(introText);
            execute(introMessage);

            for (String path : photoPaths) {

                InputStream photoStream = getClass().getClassLoader().getResourceAsStream(path);
                if (photoStream == null) {
                    System.out.println("Error: Photo not found - " + path);
                    continue;
                }

                InputFile photoFile = new InputFile(photoStream, path);

                SendPhoto photo = new SendPhoto();
                photo.setChatId(String.valueOf(chatId));
                photo.setPhoto(photoFile);

                execute(photo);
            }
        } catch (TelegramApiException e) {
            System.out.println("Error sending photos: " + e.getMessage());
            e.printStackTrace();
        }
    }
    private void sendWelcomeMessage(long chatId, String name) {
        String textToSend = name + ", –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n\n" +
                "–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –±–∞–π–µ—Ä-—Å–µ—Ä–≤–∏—Å–∞ KUPIDON, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞. –Ø –æ—Ç–≤–µ—á—É –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã! \n\n" +
                "–ë–∞–π–µ—Ä-—Å–µ—Ä–≤–∏—Å KUPIDON –ø–æ–º–æ–≥–∞–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ–∫—É–ø–∫–∏ –∂–µ–ª–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –°–®–ê, –ï–≤—Ä–æ–ø—ã, –∞ —Ç–∞–∫–∂–µ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π –∏–∑ –î—É–±–∞—è. \n\n" +
                "–ü–æ—á–µ–º—É —à–æ–ø–∏–Ω–≥ —Å KUPIDON ‚Äî —ç—Ç–æ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä? –í–æ—Ç 5 –ø—Ä–∏—á–∏–Ω: \n\n" +
                "- –ê–¥–µ–∫–≤–∞—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞; \n" +
                "- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–º–µ—Ä—ã; \n" +
                "- –¢–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥–æ–≤—ã–µ –≤–µ—â–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏; \n" +
                "- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É; \n" +
                "- –í—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏. \n\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üîª";

        sendMessageWithMainButtons(chatId, textToSend);
    }

    private void sendMessageWithMainButtons(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        rowsInline.add(List.of(
                createInlineButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "https://t.me/marinakupidon", true)
        ));
        rowsInline.add(List.of(
                createInlineButton("–ö–∞—Ç–∞–ª–æ–≥", "https://t.me/kupidonbuyer", true)
        ));
        rowsInline.add(List.of(
                createInlineButton("–î–æ—Å—Ç–∞–≤–∫–∞", "delivery", false)
        ));
        rowsInline.add(List.of(
                createInlineButton("–û—Ç–∑—ã–≤—ã", "https://t.me/feedbackkupidon", true)
        ));

        markupInline.setKeyboard(rowsInline);
        message.setReplyMarkup(markupInline);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.out.println("Error sending message with buttons: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private InlineKeyboardButton createInlineButton(String text, String dataOrUrl, boolean isUrl) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        if (isUrl) {
            button.setUrl(dataOrUrl);
        } else {
            button.setCallbackData(dataOrUrl);
        }
        return button;
    }

    private void sendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.out.println("Error sending message: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
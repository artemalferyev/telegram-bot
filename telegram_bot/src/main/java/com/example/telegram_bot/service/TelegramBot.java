package com.example.telegram_bot.service;

import com.example.telegram_bot.config.BotConfig;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    final BotConfig config;

    public TelegramBot(BotConfig config) {

        this.config = config;
        List<BotCommand> listOfCommands = new ArrayList<>();
        listOfCommands.add(new BotCommand("/start", "–ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–∏–µ"));
        try {
            this.execute(new SetMyCommands(listOfCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
        }
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();

            switch (callbackData) {
                case "reviews":
                    sendReviewsLink(chatId);
                    break;
                case "instagram":
                    sendInstagramLink(chatId);
                    break;
                case "order":
                    sendOrderMessage(chatId);
                    break;
                case "delivery":
                    sendMessage(chatId, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ: –ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.");
                    break;
                case "terms":
                    sendMessage(chatId, "–£—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏: –ü–æ–ª–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏–ª–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞.");
                    break;
                default:
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
            }
        } else if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            if (messageText.equals("/start")) {
                String name = update.getMessage().getChat().getFirstName();
                sendWelcomeMessage(chatId, name);
            } else {
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.");
            }
        }
    }

    private void sendWelcomeMessage(long chatId, String name) {
        String textToSend = name + ", –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n\n" +
                "–≠—Ç–æ –Ω–∞—à –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –±–∞–π–µ—Ä-—Å–µ—Ä–≤–∏—Å–∞ KUPIDON, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞. \n\n" +
                "–ú—ã –ø–æ–º–æ–≥–∞–µ–º –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ–∫—É–ø–∫–∏ –∂–µ–ª–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –°–®–ê, –ï–≤—Ä–æ–ø—ã, –∞ —Ç–∞–∫–∂–µ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π –∏–∑ –î—É–±–∞—è. \n\n" +
                "–ü–æ—á–µ–º—É —à–æ–ø–∏–Ω–≥ —Å KUPIDON ‚Äî —ç—Ç–æ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä? –í–æ—Ç 5 –ø—Ä–∏—á–∏–Ω: \n\n" +
                "- –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∏ –∞–¥–µ–∫–≤–∞—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞. \n" +
                "- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–º–µ—Ä—ã. \n" +
                "- –¢–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥–æ–≤—ã–µ –≤–µ—â–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏. \n" +
                "- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É. \n" +
                "- –í—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏. \n\n" +
                "–†–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–æ–∫—É–ø–∫–∞–º–∏! \n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üîª";

        sendMessageWithMainButtons(chatId, textToSend);
    }

    private void sendMessageWithMainButtons(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        InlineKeyboardButton reviewsButton = new InlineKeyboardButton();
        reviewsButton.setText("–û—Ç–∑—ã–≤—ã");
        reviewsButton.setCallbackData("reviews");

        InlineKeyboardButton instagramButton = new InlineKeyboardButton();
        instagramButton.setText("–ò–Ω—Å—Ç–∞–≥—Ä–∞–º");
        instagramButton.setCallbackData("instagram");

        InlineKeyboardButton orderButton = new InlineKeyboardButton();
        orderButton.setText("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑");
        orderButton.setCallbackData("order");

        InlineKeyboardButton deliveryButton = new InlineKeyboardButton();
        deliveryButton.setText("–î–æ—Å—Ç–∞–≤–∫–∞");
        deliveryButton.setCallbackData("delivery");

        InlineKeyboardButton termsButton = new InlineKeyboardButton();
        termsButton.setText("–£—Å–ª–æ–≤–∏—è");
        termsButton.setCallbackData("terms");

        InlineKeyboardButton catalogButton = new InlineKeyboardButton();
        catalogButton.setText("–ö–∞—Ç–∞–ª–æ–≥");
        catalogButton.setUrl("https://t.me/kupidonbuyer");

        rowsInline.add(List.of(reviewsButton));
        rowsInline.add(List.of(instagramButton));
        rowsInline.add(List.of(orderButton));
        rowsInline.add(List.of(deliveryButton));
        rowsInline.add(List.of(termsButton));
        rowsInline.add(List.of(catalogButton));

        markupInline.setKeyboard(rowsInline);
        message.setReplyMarkup(markupInline);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendReviewsLink(long chatId) {
        String reviewsUrl = "https://t.me/feedbackkupidon";
        sendMessage(chatId, "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: " + reviewsUrl);
    }

    private void sendInstagramLink(long chatId) {
        String instagramUrl = "https://www.instagram.com/kupidon_buyerservice/?igsh=ampzend5ejR6MDAx&utm_source=qr";
        sendMessage(chatId, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à Instagram: " + instagramUrl);
    }

    private void sendOrderMessage(long chatId) {
        String managerUsername = "@MarinaKupidon";
        String messageText = "–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –í–∞–º –ø–æ–º–æ—á—å ‚ù§Ô∏è\n" +
                "–°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.\n\n" +
                "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ò∫Ô∏è\n\n" +
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∑–¥–µ—Å—å: " + managerUsername;

        sendMessage(chatId, messageText);
    }

    private void sendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
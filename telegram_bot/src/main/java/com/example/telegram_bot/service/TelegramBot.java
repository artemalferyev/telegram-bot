package com.example.telegram_bot.service;

import com.example.telegram_bot.config.BotConfig;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.send.SendVideo;
import org.telegram.telegrambots.meta.api.methods.send.SendAudio;
import org.telegram.telegrambots.meta.api.methods.send.SendVoice;
import org.telegram.telegrambots.meta.api.objects.InputFile;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    private final BotConfig config;
    private static final long MANAGER_USER_ID =  6614865222L;
    private final Map<Integer, Long> messageIdToUserIdMap = new HashMap<>();

    public TelegramBot(BotConfig config) {
        this.config = config;

        List<BotCommand> listOfCommands = new ArrayList<>();
        listOfCommands.add(new BotCommand("/start", "–ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–∏–µ"));

        try {
            this.execute(new SetMyCommands(listOfCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            System.out.println("Error setting bot commands: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();
            System.out.println("Callback query received: " + callbackData);

            switch (callbackData) {
                case "order":
                    sendOrderMessage(chatId);
                    break;
                case "delivery":
                    sendMessage(chatId,
                            "–í–∞–∂–Ω–æ:\n\n" +
                                    "‚ñ´Ô∏è –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –¥–∞–ª–µ–µ ‚Äî 0,15 ‚Ç¨ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å;\n\n" +
                                    "‚ñ´Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–∞–≥–∞–∑–∏–Ω ‚Äî 15 ‚Ç¨;\n\n" +
                                    "‚ñ´Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑ –ï–≤—Ä–æ–ø—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –ø–∞—Ä—Ç–∏—è–º–∏.\n\n" +
                                    "‚ñ´Ô∏è –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî 5 ‚Ç¨;\n\n" +
                                    "‚ñ´Ô∏è –î–æ—Å—Ç–∞–≤–∫–∞ lux-–±—Ä–µ–Ω–¥–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Å—Ä–æ–∫ 7 –¥–Ω–µ–π, –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.\n\n" +
                                    "‚ñ´Ô∏è –î–æ—Å—Ç–∞–≤–∫–∞ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä–æ–º, –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.\n\n" +
                                    "‚ñ´Ô∏è –ó–∞–º–µ—Ä—ã ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ."
                    );
                    break;
                default:
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
            }
        } else if (update.hasMessage()) {
            var message = update.getMessage();
            long chatId = message.getChatId();

            if (message.hasText()) {
                String messageText = message.getText();
                System.out.println("Received message from user, chatId: " + chatId + ", text: " + messageText);

                if (messageText.equals("/start")) {
                    String name = message.getChat().getFirstName();
                    sendWelcomeMessage(chatId, name);
                } else {
                    forwardToManager(update, chatId, messageText);
                }
            } else if (message.hasPhoto()) {
                forwardMediaToManager(message.getPhoto().get(0).getFileId(), "photo", chatId, update);
            } else if (message.hasVideo()) {
                forwardMediaToManager(message.getVideo().getFileId(), "video", chatId, update);
            } else if (message.hasAudio()) {
                forwardMediaToManager(message.getAudio().getFileId(), "audio", chatId, update);
            } else if (message.hasVoice()) {
                forwardMediaToManager(message.getVoice().getFileId(), "voice", chatId, update);
            }
        }
    }

    private void forwardMediaToManager(String fileId, String mediaType, long userChatId, Update update) {
        try {

            String userName = "";
            String firstName = update.getMessage().getChat().getFirstName();
            String lastName = update.getMessage().getChat().getLastName();

            if (firstName != null) {
                userName += firstName;
            }
            if (lastName != null) {
                userName += " " + lastName;
            }

            switch (mediaType) {
                case "photo":
                    SendPhoto sendPhoto = new SendPhoto();
                    sendPhoto.setChatId(String.valueOf(MANAGER_USER_ID));
                    sendPhoto.setPhoto(new InputFile(fileId));
                    sendPhoto.setCaption("–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userName + " (ID: " + userChatId + ")");
                    execute(sendPhoto);
                    break;

                case "video":
                    SendVideo sendVideo = new SendVideo();
                    sendVideo.setChatId(String.valueOf(MANAGER_USER_ID));
                    sendVideo.setVideo(new InputFile(fileId));
                    sendVideo.setCaption("–í–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userName + " (ID: " + userChatId + ")");
                    execute(sendVideo);
                    break;

                case "audio":
                    SendAudio sendAudio = new SendAudio();
                    sendAudio.setChatId(String.valueOf(MANAGER_USER_ID));
                    sendAudio.setAudio(new InputFile(fileId));
                    sendAudio.setCaption("–ê—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userName + " (ID: " + userChatId + ")");
                    execute(sendAudio);
                    break;

                case "voice":
                    SendVoice sendVoice = new SendVoice();
                    sendVoice.setChatId(String.valueOf(MANAGER_USER_ID));
                    sendVoice.setVoice(new InputFile(fileId));
                    sendVoice.setCaption("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userName + " (ID: " + userChatId + ")");
                    execute(sendVoice);
                    break;
            }
        } catch (TelegramApiException e) {
            System.out.println("Error forwarding " + mediaType + " to manager: " + e.getMessage());
            e.printStackTrace();
        }
    }
    private void sendWelcomeMessage(long chatId, String name) {
        String textToSend = name + ", –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n\n" +
                "–Ø - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –±–∞–π–µ—Ä-—Å–µ—Ä–≤–∏—Å–∞ KUPIDON, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞. –Ø –æ—Ç–≤–µ—á—É –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã! \n\n" +
                "–ë–∞–π–µ—Ä-—Å–µ—Ä–≤–∏—Å KUPIDON –ø–æ–º–æ–≥–∞–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ–∫—É–ø–∫–∏ –∂–µ–ª–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –°–®–ê, –ï–≤—Ä–æ–ø—ã, –∞ —Ç–∞–∫–∂–µ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö —É–∫—Ä–∞—à–µ–Ω–∏–π –∏–∑ –î—É–±–∞—è. \n\n" +
                "–ü–æ—á–µ–º—É —à–æ–ø–∏–Ω–≥ —Å KUPIDON ‚Äî —ç—Ç–æ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä? –í–æ—Ç 5 –ø—Ä–∏—á–∏–Ω: \n\n" +
                "- –ê–¥–µ–∫–≤–∞—Ç–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞; \n" +
                "- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–º–µ—Ä—ã; \n" +
                "- –¢–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥–æ–≤—ã–µ –≤–µ—â–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏; \n" +
                "- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É; \n" +
                "- –í—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏. \n\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üîª";

        sendMessageWithMainButtons(chatId, textToSend);
    }

    private void sendMessageWithMainButtons(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();

        rowsInline.add(List.of(
                createInlineButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "https://t.me/marinakupupidon", true)
        ));
        rowsInline.add(List.of(
                createInlineButton("–ö–∞—Ç–∞–ª–æ–≥", "https://t.me/kupidonbuyer", true)
        ));
        rowsInline.add(List.of(
                createInlineButton("–î–æ—Å—Ç–∞–≤–∫–∞", "delivery", false)
        ));
        rowsInline.add(List.of(
                createInlineButton("–û—Ç–∑—ã–≤—ã", "https://t.me/feedbackkupidon", true)
        ));

        markupInline.setKeyboard(rowsInline);
        message.setReplyMarkup(markupInline);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.out.println("Error sending message with buttons: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private InlineKeyboardButton createInlineButton(String text, String dataOrUrl, boolean isUrl) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        if (isUrl) {
            button.setUrl(dataOrUrl);
        } else {
            button.setCallbackData(dataOrUrl);
        }
        return button;
    }

    private void sendOrderMessage(long chatId) {
        String messageText = "–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –í–∞–º –ø–æ–º–æ—á—å ‚ù§Ô∏è\n" +
                "–°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.\n\n" +
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ò∫Ô∏è";
        sendMessage(chatId, messageText);
    }

    private void sendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.out.println("Error sending message: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void forwardToManager(Update update, long userChatId, String messageText) {
        String userName = "";
        String firstName = update.getMessage().getChat().getFirstName();
        String lastName = update.getMessage().getChat().getLastName();

        if (firstName != null) {
            userName += firstName;
        }
        if (lastName != null) {
            userName += " " + lastName;
        }

        SendMessage forwardMessage = new SendMessage();
        forwardMessage.setChatId(String.valueOf(MANAGER_USER_ID));
        forwardMessage.setText("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userName + " (ID: " + userChatId + "):\n" + messageText);

        try {
            var sentMessage = execute(forwardMessage);
            if (sentMessage != null) {
                int messageId = sentMessage.getMessageId();
                messageIdToUserIdMap.put(messageId, userChatId);
                System.out.println("Mapped message ID " + messageId + " to user ID " + userChatId);
            } else {
                System.out.println("Error: Sent message is null. Unable to map user chat ID.");
            }
        } catch (TelegramApiException e) {
            System.out.println("Error forwarding message to manager: " + e.getMessage());
            e.printStackTrace();
        }
    }


    private void handleManagerResponse(org.telegram.telegrambots.meta.api.objects.Message replyToMessage, String managerMessage) {
        if (replyToMessage == null) {
            sendMessage(MANAGER_USER_ID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.");
            System.out.println("Error: replyToMessage is null. Ensure the manager is replying to a forwarded user message.");
            return;
        }

        int originalMessageId = replyToMessage.getMessageId();
        Long userChatId = messageIdToUserIdMap.get(originalMessageId);

        System.out.println("Attempting to find user for original message ID: " + originalMessageId);
        System.out.println("Current map: " + messageIdToUserIdMap);

        if (userChatId == null) {
            sendMessage(MANAGER_USER_ID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.");
            System.out.println("Error: No user mapping found for message ID " + originalMessageId);
            return;
        }

        try {
            sendMessage(userChatId, "–û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n" + managerMessage);
            System.out.println("Successfully replied to user ID: " + userChatId + " with manager message: " + managerMessage);
        } catch (Exception e) {
            sendMessage(MANAGER_USER_ID, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
            System.out.println("Error sending message to user ID " + userChatId + ": " + e.getMessage());
            e.printStackTrace();
        }
    }
}